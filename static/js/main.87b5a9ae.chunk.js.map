{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","bodyBgr","backgroundColor","bodyBgb","App","props","state","click","handleClick","bind","this","setState","className","style","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAIC,EAAU,CAACC,gBAAiB,SAC5BC,EAAU,CAACD,gBAAiB,QAE1BE,E,YACF,WAAaC,GAAQ,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACTC,OAAO,GAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALH,E,mHAYZC,KAAKJ,MAAMC,OACXN,EAAUE,EACVO,KAAKC,SAAS,CACVJ,OAAQ,MAGZN,EAAUA,EACVS,KAAKC,SAAS,CACVJ,OAAQ,O,+BAKhB,OACI,yBAAKK,UAAU,cACX,wBAAIA,UAAU,eAAd,0BAGA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAMA,UAAU,sBAChB,yBAAMC,MAAOZ,EAASW,UAAU,8BAC5B,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,4EAKR,yBAAKA,UAAU,cACX,yBAAKA,UAAU,OACX,gDAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,uBAAGA,UAAU,gCACb,uBAAGA,UAAU,+BACb,uBAAGA,UAAU,iCAEjB,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,0BAAMA,UAAU,QAAhB,gBAIZ,yBAAKA,UAAU,6B,GA3DrBE,IAAMC,WAmExBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsD3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87b5a9ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.css';\nimport './font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nlet bodyBgr = {backgroundColor: 'white'};\nlet bodyBgb = {backgroundColor: 'blue'};\nconst bodyBgg = {backgroundColor: 'green'};\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            click: true\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleChange () {\n\n    }\n\n    handleClick () {\n        if (this.state.click) {\n            bodyBgr = bodyBgb;\n            this.setState({\n                click : false\n            });\n        } else {\n            bodyBgr = bodyBgr;\n            this.setState({\n                click : true\n            });\n        }\n    }\n    render() {\n        return (\n            <div className=\"center-div\">\n                <h1 className=\"text-center\">\n                    A Random Qoute Machine\n                </h1>\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div  className=\"col-md-3 col-sm-1\"></div>\n                        <div  style={bodyBgr} className=\"col-md-6 col-sm-10 btn-div\">\n                            <div className=\"row\">\n                                <div className=\"col quote\">\n                                    <h3>\n                                        You miss 100% of the shots you don't take.\n                                    </h3>\n                                </div>\n                            </div>\n                            <div className=\"row author\">\n                                <div className=\"col\">\n                                    <p>- Wayne Gretzky</p>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-4\">\n                                    <i className=\"fa fa-facebook social-icons\"></i>\n                                    <i className=\"fa fa-twitter social-icons\"></i>\n                                    <i className=\"fa fa-linkedin social-icons\"></i>\n                                </div>\n                                <div className=\"col-4\"></div>\n                                <div className=\"col-4\">\n                                    <span className=\"next\">New Quote</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-3 col-sm-1\"></div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n{/* <button className=\"btn bg-light\" onClick={this.handleClick}>New qoute</button> */}\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}